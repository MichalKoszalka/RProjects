source('C:/workspace/RProjects/Lab5/zadanie2.R')
iris
iris[.1:4]
iris[,1:4]
iris.values = scale(log(iris[, 1:4]))
iris.values
prcomp(iris.values)
iris.prcomp = prcomp(iris.values)
iris.prcomp
iris.predicted = predict(iris.prcomp)[,1:2]
iris.predicted
result = kmeans(iris.data, 3, iter.max = 1000, nstart = 3)
result = kmeans(iris.data, 3, iter.max = 1000, nstart = 3)
result = kmeans(iris.predicted, 3, iter.max = 1000, nstart = 3)
plot(iris.predicted, col = result$cluster)
points(result$centers, col = 1:2, pch = 8, cex = 2)
points(result$centers, col = 1:2, pch = 8, cex = 1)
plot(iris.predicted, col = result$cluster)
points(result$centers, col = 1:2, pch = 8, cex = 1)
points(result$centers, col = 1:2, pch = 8, cex = 4)
plot(iris.predicted, col = result$cluster)
points(result$centers, col = 1:2, pch = 5, cex = 1)
plot(iris.predicted, col = result$cluster)
points(result$centers, col = 1:2, pch = 1, cex = 2)
points(result$centers, col = 1:2, pch = 3, cex = 3)
plot(iris.predicted, col = result$cluster)
points(result$centers, col = 1:2, pch = 3, cex = 3)
result$cluster
return(cluster)
require(fields)
customkmean = function(data, k, iterations) {
cluster = 0
distance = 0
x = runif(k, c(min(data[,1])), max(data[,1]))
y = runif(k, min(data[,2]), max(data[,2]))
centroid = as.data.frame(matrix(c(x, y), nrow = k, ncol = 2), stringsAsFactors = default.stringsAsFactors())
colnames(centroid) = c("X", "Y")
for (i in 1:iterations) {
for(j in 1:length(data[,1])) {
for(k in 1:length(centroid[,1])) {
distance[k] = rdist(x1 = t(data[j,]), x2 = centroid[k,])
}
cluster[j] = which(distance == min(distance))
}
data.classes = as.data.frame(matrix(c(data, cluster), ncol = 3), stringsAsFactors = default.stringsAsFactors())
colnames(data.classes) = c("PC1", "PC2", "Cluster")
for(j in 1:length(centroid[,1])) {
filtered = data.classes[which(data.classes$Cluster == j),]
centroid[l,]$X = mean(filtered$PC1)
centroid[l,]$Y = mean(filtered$PC2)
}
}
return(cluster)
}
result2 = customkmean(iris.predicted, 3, 1000)
rdist
require(fields)
install.packages(fields)
install.packages("fields")
result2 = customkmean(iris.predicted, 3, 1000)
require(fields)
result2 = customkmean(iris.predicted, 3, 1000)
require(fields)
customkmean = function(data, k, iterations) {
cluster = 0
distance = 0
x = runif(k, c(min(data[,1])), max(data[,1]))
y = runif(k, min(data[,2]), max(data[,2]))
centroid = as.data.frame(matrix(c(x, y), nrow = k, ncol = 2), stringsAsFactors = default.stringsAsFactors())
colnames(centroid) = c("X", "Y")
for (i in 1:iterations) {
for(j in 1:length(data[,1])) {
for(k in 1:length(centroid[,1])) {
distance[k] = rdist(x1 = t(data[j,]), x2 = centroid[k,])
}
cluster[j] = which(distance == min(distance))
}
data.classes = as.data.frame(matrix(c(data, cluster), ncol = 3), stringsAsFactors = default.stringsAsFactors())
colnames(data.classes) = c("PC1", "PC2", "Cluster")
for(j in 1:length(centroid[,1])) {
filtered = data.classes[which(data.classes$Cluster == j),]
centroid[j,]$X = mean(filtered$PC1)
centroid[j,]$Y = mean(filtered$PC2)
}
}
return(cluster)
}
result2 = customkmean(iris.predicted, 3, 1000)
plot(iris.predicted, col = result2$cluster)
plot(iris.predicted, col = result$cluster)
plot(iris.predicted, col = result2$cluster)
result2 = customkmean(iris.predicted, 3, 10)
result2
require(fields)
customkmean = function(data, k, iterations) {
cluster = 0
distance = 0
range.data = c(min(data[,1]), max(data[,1]), min(data[,2]), max(data[,2]))
x = runif(k, range.data[1], range.data[2])
y = runif(k, range.data[3], range.data[4])
centroid = as.data.frame(matrix(c(x, y), nrow = k, ncol = 2), stringsAsFactors = default.stringsAsFactors())
colnames(centroid) = c("X", "Y")
for (i in 1:iterations) {
for(j in 1:length(data[,1])) {
for(k in 1:length(centroid[,1])) {
distance[k] = rdist(x1 = t(data[j,]), x2 = centroid[k,])
}
cluster[j] = which(distance == min(distance))
}
data.classes = as.data.frame(matrix(c(data, cluster), ncol = 3), stringsAsFactors = default.stringsAsFactors())
colnames(data.classes) = c("PC1", "PC2", "Cluster")
for(j in 1:length(centroid[,1])) {
filtered = data.classes[which(data.classes$Cluster == j),]
centroid[j,]$X = mean(filtered$PC1)
centroid[j,]$Y = mean(filtered$PC2)
}
}
return(cluster)
}
result2 = customkmean(iris.predicted, 3, 10)
require(fields)
customkmean = function(data, cls, iterations) {
cluster = 0
distance = 0
x = runif(cls, c(min(data[,1])), max(data[,1]))
y = runif(cls, min(data[,2]), max(data[,2]))
centroid = as.data.frame(matrix(c(x, y), nrow = cls, ncol = 2), stringsAsFactors = default.stringsAsFactors())
colnames(centroid) = c("X", "Y")
for (i in 1:iterations) {
for(j in 1:length(data[,1])) {
for(k in 1:length(centroid[,1])) {
distance[k] = rdist(x1 = t(data[j,]), x2 = centroid[k,])
}
cluster[j] = which(distance == min(distance))
}
data.classes = as.data.frame(matrix(c(data, cluster), ncol = 3), stringsAsFactors = default.stringsAsFactors())
colnames(data.classes) = c("PC1", "PC2", "Cluster")
for(j in 1:length(centroid[,1])) {
filtered = data.classes[which(data.classes$Cluster == j),]
centroid[j,]$X = mean(filtered$PC1)
centroid[j,]$Y = mean(filtered$PC2)
}
}
return(cluster)
}
result2 = customkmean(iris.predicted, 3, 10)
require(fields)
customkmean = function(data, cls, iterations) {
cluster = 0
distance = 0
x = runif(cls, c(min(data[,1])), max(data[,1]))
y = runif(cls, min(data[,2]), max(data[,2]))
centroid = as.data.frame(matrix(c(x, y), nrow = cls, ncol = 2), stringsAsFactors = default.stringsAsFactors())
colnames(centroid) = c("X", "Y")
for (i in 1:iterations) {
for(j in 1:length(data[,1])) {
for(k in 1:length(centroid[,1])) {
distance[k] = rdist(x1 = t(data[j,]), x2 = centroid[k,])
}
cluster[j] = which(distance == min(distance))
}
data.classes = as.data.frame(matrix(c(data, cluster), ncol = 3), stringsAsFactors = default.stringsAsFactors())
colnames(data.classes) = c("PC1", "PC2", "Cluster")
for(j in 1:length(centroid[,1])) {
filtered = data.classes[which(data.classes$Cluster == j),]
centroid[j,]$X = mean(filtered$PC1)
centroid[j,]$Y = mean(filtered$PC2)
}
}
return(cluster)
}
kmean2 = function(k, data, iterations)
{
range.data = c(min(data[,1]), max(data[,1]), min(data[,2]), max(data[,2]))
centroid.x = runif(k, range.data[1], range.data[2])
centroid.y = runif(k, range.data[3], range.data[4])
centroid = as.data.frame(matrix(c(centroid.x, centroid.y), nrow = k, ncol = 2), stringsAsFactors = default.stringsAsFactors())
colnames(centroid) = c("X", "Y")
cluster = 0
distance = 0
for (i in 1:iterations) {
for(j in 1:length(data[,1])) {
for(l in 1:length(centroid[,1])) {
distance[l] = rdist(x1 = t(data[j,]), x2 = centroid[l,])
}
cluster[j] = which(distance == min(distance))
}
data.classes = as.data.frame(matrix(c(data, cluster), ncol = 3), stringsAsFactors = default.stringsAsFactors())
colnames(data.classes) = c("PC1", "PC2", "Cluster")
for(l in 1:length(centroid[,1])) {
tmp = data.classes[which(data.classes$Cluster == l),]
centroid[l,]$X = mean(tmp$PC1)
centroid[l,]$Y = mean(tmp$PC2)
}
}
return(cluster)
}
result2 = kmean2(iris.predicted, 3, 10)
result2 = kmean2(3,iris.predicted, 10)
plot(iris.predicted, col = result2)
points(result2$centers, col = 1:2, pch = 8, cex = 2)
result
require(fields)
customkmean = function(data, cls, iterations) {
cluster = 0
distance = 0
x = runif(cls, c(min(data[,1])), max(data[,1]))
y = runif(cls, min(data[,2]), max(data[,2]))
centroid = as.data.frame(matrix(c(x, y), nrow = cls, ncol = 2), stringsAsFactors = default.stringsAsFactors())
colnames(centroid) = c("X", "Y")
for (i in 1:iterations) {
for(j in 1:length(data[,1])) {
for(k in 1:length(centroid[,1])) {
distance[k] = rdist(x1 = t(data[j,]), x2 = centroid[k,])
}
cluster[j] = which(distance == min(distance))
}
data.classes = as.data.frame(matrix(c(data, cluster), ncol = 3), stringsAsFactors = default.stringsAsFactors())
colnames(data.classes) = c("PC1", "PC2", "Cluster")
for(j in 1:length(centroid[,1])) {
filtered = data.classes[which(data.classes$Cluster == j),]
centroid[j,]$X = mean(filtered$PC1)
centroid[j,]$Y = mean(filtered$PC2)
}
}
return(cluster)
}
result2 = customkmean(iris.predicted, 3, 10)
plot(iris.predicted, col = result2)
require(fields)
customkmean = function(data, cls, iterations) {
result = 0
distance = 0
x = runif(cls, c(min(data[,1])), max(data[,1]))
y = runif(cls, min(data[,2]), max(data[,2]))
centroid = as.data.frame(matrix(c(x, y), nrow = cls, ncol = 2), stringsAsFactors = default.stringsAsFactors())
colnames(centroid) = c("X", "Y")
for (i in 1:iterations) {
for(j in 1:length(data[,1])) {
for(k in 1:length(centroid[,1])) {
distance[k] = rdist(x1 = t(data[j,]), x2 = centroid[k,])
}
result$cluster[j] = which(distance == min(distance))
}
data.classes = as.data.frame(matrix(c(data, result$cluster), ncol = 3), stringsAsFactors = default.stringsAsFactors())
colnames(data.classes) = c("PC1", "PC2", "result")
for(j in 1:length(centroid[,1])) {
filtered = data.classes[which(data.classes$result$cluster == j),]
centroid[j,]$X = mean(filtered$PC1)
centroid[j,]$Y = mean(filtered$PC2)
}
}
result$centers = centroid
return(result)
}
result2 = customkmean(iris.predicted, 3, 10)
require(fields)
customkmean = function(data, cls, iterations) {
cluster = 0
distance = 0
x = runif(cls, c(min(data[,1])), max(data[,1]))
y = runif(cls, min(data[,2]), max(data[,2]))
centroid = as.data.frame(matrix(c(x, y), nrow = cls, ncol = 2), stringsAsFactors = default.stringsAsFactors())
colnames(centroid) = c("X", "Y")
for (i in 1:iterations) {
for(j in 1:length(data[,1])) {
for(k in 1:length(centroid[,1])) {
distance[k] = rdist(x1 = t(data[j,]), x2 = centroid[k,])
}
cluster[j] = which(distance == min(distance))
}
data.classes = as.data.frame(matrix(c(data, cluster), ncol = 3), stringsAsFactors = default.stringsAsFactors())
colnames(data.classes) = c("PC1", "PC2", "Cluster")
for(j in 1:length(centroid[,1])) {
filtered = data.classes[which(data.classes$Cluster == j),]
centroid[j,]$X = mean(filtered$PC1)
centroid[j,]$Y = mean(filtered$PC2)
}
}
return(cluster, centroid)
}
result2 = customkmean(iris.predicted, 3, 10)
require(fields)
customkmean = function(data, cls, iterations) {
cluster = 0
distance = 0
x = runif(cls, c(min(data[,1])), max(data[,1]))
y = runif(cls, min(data[,2]), max(data[,2]))
centroid = as.data.frame(matrix(c(x, y), nrow = cls, ncol = 2), stringsAsFactors = default.stringsAsFactors())
colnames(centroid) = c("X", "Y")
for (i in 1:iterations) {
for(j in 1:length(data[,1])) {
for(k in 1:length(centroid[,1])) {
distance[k] = rdist(x1 = t(data[j,]), x2 = centroid[k,])
}
cluster[j] = which(distance == min(distance))
}
data.classes = as.data.frame(matrix(c(data, cluster), ncol = 3), stringsAsFactors = default.stringsAsFactors())
colnames(data.classes) = c("PC1", "PC2", "Cluster")
for(j in 1:length(centroid[,1])) {
filtered = data.classes[which(data.classes$Cluster == j),]
centroid[j,]$X = mean(filtered$PC1)
centroid[j,]$Y = mean(filtered$PC2)
}
}
return(list(cluster, centroid))
}
result2 = customkmean(iris.predicted, 3, 10)
result2
plot(iris.predicted, col = result2[1])
plot(iris.predicted, col = result2)
result2[1]
result2[0]
result2[1]
plot(iris.predicted, col = result2[1])
res2 = result2[1]
plot(iris.predicted, col = res2)
require(fields)
customkmean = function(data, cls, iterations) {
cluster = 0
distance = 0
x = runif(cls, c(min(data[,1])), max(data[,1]))
y = runif(cls, min(data[,2]), max(data[,2]))
centroid = as.data.frame(matrix(c(x, y), nrow = cls, ncol = 2), stringsAsFactors = default.stringsAsFactors())
colnames(centroid) = c("X", "Y")
for (i in 1:iterations) {
for(j in 1:length(data[,1])) {
for(k in 1:length(centroid[,1])) {
distance[k] = rdist(x1 = t(data[j,]), x2 = centroid[k,])
}
cluster[j] = which(distance == min(distance))
}
data.classes = as.data.frame(matrix(c(data, cluster), ncol = 3), stringsAsFactors = default.stringsAsFactors())
colnames(data.classes) = c("PC1", "PC2", "Cluster")
for(j in 1:length(centroid[,1])) {
filtered = data.classes[which(data.classes$Cluster == j),]
centroid[j,]$X = mean(filtered$PC1)
centroid[j,]$Y = mean(filtered$PC2)
}
}
return(cluster)
}
result2 = customkmean(iris.predicted, 3, 10)
plot(iris.predicted, col = result2)
