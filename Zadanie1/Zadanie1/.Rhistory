if(!is.null(rowSum1)) {
rowsum1 = A[c,r];
} else {
rowSum1 = rowSum1 | A[c,r];
}
}
if(!is.null(rowSum1) && rowSum1 == TRUE) {
result = result + 1;
}
}
return(result)
}
fitness(A, x)
fitness = function(B, x) {
A = B
for(i in 1:length(x)) {
A[A == i] <- x[i];
A[A == -i] <- !x[i];
}
result = 0;
for(r in 1 : nrow(A)) {
rowSum1 <- NULL;
for(c in 1:ncol(A)-1) {
if(!is.null(rowSum1)) {
rowsum1 = A[c,r];
} else {
rowSum1 = rowSum1 | A[c,r];
}
}
if(!is.null(rowSum1)) {
if(rowSum1) {
result = result + 1;
}
}
}
return(result)
}
fitness(A, x)
fitness = function(B, x) {
A = B
for(i in 1:length(x)) {
A[A == i] <- x[i];
A[A == -i] <- !x[i];
}
result = 0;
for(r in 1 : nrow(A)) {
rowSum1 <- NULL;
for(c in 1:ncol(A)-1) {
if(!is.null(rowSum1)) {
rowsum1 = A[c,r];
} else {
rowSum1 = rowSum1 | A[c,r];
}
}
if(!is.null(rowSum1)) {
if(rowSum1 == TRUE) {
result = result + 1;
}
}
}
return(result)
}
fitness(A, x)
rowSum1 = A[1,1]
rowSum1
rowSum1 | TRUE
rowSum1 | FALSE
for(i in 1:length(x)) {
A[A == i] <- x[i];
A[A == -i] <- !x[i];
}
A
A = C
C
A
fitness = function(B, x) {
A = B
for(i in 1:length(x)) {
A[A == i] <- x[i];
A[A == -i] <- !x[i];
}
result = 0;
for(r in 1 : nrow(A)) {
rowSum1 <- NULL;
for(c in 1:ncol(A)-1) {
if(!is.null(rowSum1)) {
rowsum1 = A[c,r];
} else {
rowSum1 = rowSum1 | A[c,r];
}
}
if(!is.null(rowSum1)) {
if(rowSum1 == TRUE) {
result = result + 1;
}
}
}
return(result)
}
fitness(A, x)
fitness = function(B, x) {
A = B
for(i in 1:length(x)) {
A[A == i] <- x[i];
A[A == -i] <- !x[i];
}
result = 0;
for(r in 1 : nrow(A)) {
rowSum1 <- NULL;
for(c in 1:ncol(A)-1) {
if(!is.null(rowSum1)) {
rowsum1 = A[c,r];
} else {
rowSum1 = rowSum1 | A[c,r];
}
}
print(rowSum1)
if(!is.null(rowSum1)) {
if(rowSum1 == TRUE) {
result = result + 1;
}
}
}
return(result)
}
fitness(A, x)
d = true
d
d = TRUE
d
fitness = function(B, x) {
A = B
for(i in 1:length(x)) {
A[A == i] <- x[i];
A[A == -i] <- !x[i];
}
result = 0;
for(r in 1 : nrow(A)) {
rowSum1 <- NULL;
for(c in 1:ncol(A)-1) {
if(!is.null(rowSum1)) {
rowsum1 = A[c,r];
} else {
rowSum1 = rowSum1 | A[c,r];
}
}
rowSum1
if(!is.null(rowSum1)) {
if(rowSum1 == TRUE) {
result = result + 1;
}
}
}
return(result)
}
fitness(A, x)
fitness = function(B, x) {
A = B
for(i in 1:length(x)) {
A[A == i] <- x[i];
A[A == -i] <- !x[i];
}
result = 0;
for(r in 1 : nrow(A)) {
rowSum1 <- NULL;
for(c in 1:ncol(A)-1) {
if(!is.null(rowSum1)) {
rowsum1 = A[c,r];
} else {
rowSum1 = rowSum1 | A[c,r];
}
}
rowSum1
if(!is.null(rowSum1)) {
if(rowSum1 == 1) {
result = result + 1;
}
}
}
return(result)
}
fitness(A, x)
TRUE == NULL
fitness = function(B, x) {
A = B
for(i in 1:length(x)) {
A[A == i] <- x[i];
A[A == -i] <- !x[i];
}
result = 0;
for(r in 1 : nrow(A)) {
rowSum1 <- NA;
for(c in 1:ncol(A)-1) {
if(!is.null(rowSum1)) {
rowsum1 = A[c,r];
} else {
rowSum1 <- rowSum1 | A[c,r];
}
}
rowSum1
if(!is.null(rowSum1)) {
if(rowSum1 == 1) {
result = result + 1;
}
}
}
return(result)
}
fitness(A, x)
for(i in 1:length(x)) {
A[A == i] <- x[i];
A[A == -i] <- !x[i];
}
result = 0;
for(r in 1 : nrow(A)) {
rowSum1 <- NA;
for(c in 1:ncol(A)-1) {
if(!is.null(rowSum1)) {
rowsum1 = A[c,r];
} else {
rowSum1 <- rowSum1 | A[c,r];
}
}
if(!is.null(rowSum1)) {
if(rowSum1 == 1) {
result = result + 1;
}
}
}
return(result)
for(i in 1:length(x)) {
A[A == i] <- x[i];
A[A == -i] <- !x[i];
}
result = 0;
for(r in 1 : nrow(A)) {
rowSum1 <- NA;
for(c in 1:ncol(A)-1) {
if(!is.null(rowSum1)) {
rowsum1 = A[c,r];
} else {
rowSum1 <- rowSum1 | A[c,r];
}
}
if(!is.null(rowSum1)) {
if(rowSum1 == 1) {
result = result + 1;
}
}
}
result
View(A)
View(A)
View(A)
fitness = function(B, x) {
A = B
for(i in 1:length(x)) {
A[A == i] <- x[i];
A[A == -i] <- !x[i];
}
result = 0;
for(r in 1 : nrow(A)) {
rowSum1 <- NA;
for(c in 1:ncol(A)-1) {
if(!is.null(rowSum1)) {
rowsum1 = A[c,r];
} else {
rowSum1 <- rowSum1 | A[c,r];
}
}
rowSum1
if(!is.null(rowSum1)) {
if(rowSum1 == 1) {
result = result + 1;
}
}
}
return(result)
}
A = C
remove(a,b)
remove(B,c,d,i,r,result, rowSum1, rowsum1)
fitness = function(B, x) {
A = B
for(i in 1:length(x)) {
A[A == i] <- x[i];
A[A == -i] <- !x[i];
}
result = 0;
for(r in 1 : nrow(A)) {
rowSum1 = FALSE;
for(c in 1:ncol(A)-1) {
if(c==1) {
rowsum1 = A[c,r];
} else {
rowSum1 <- rowSum1 | A[c,r];
}
}
if(rowSum1) {
result = result + 1;
}
}
return(result)
}
fitness(A, x)
fitness = function(B, x) {
A = B
for(i in 1:length(x)) {
A[A == i] <- x[i];
A[A == -i] <- !x[i];
}
result = 0;
for(r in 1 : nrow(A)) {
rowSum1 <- FALSE;
for(c in 1:ncol(A)-1) {
if(c==1) {
rowsum1 = A[c,r];
} else {
rowSum1 <- rowSum1 | A[c,r];
}
}
if(rowSum1 == TRUE) {
result = result + 1;
}
}
return(result)
}
fitness(A, x)
k <- FALSE
if(k)
{}
if(k) { print("helo")}
k = TRUE
if(k) { print("helo")}
View(fitness)
fitness = function(B, x) {
A = B
for(i in 1:length(x)) {
A[A == i] <- x[i];
A[A == -i] <- !x[i];
}
result = 0;
for(r in 1 : nrow(A)) {
rowSum1 <- FALSE;
for(c in 1:ncol(A)-1) {
if(c==1) {
rowSum1 = A[c,r];
} else {
rowSum1 <- rowSum1 | A[c,r];
}
}
if(rowSum1 == TRUE) {
result = result + 1;
}
}
return(result)
}
fitness(A, x)
A
fitness = function(B, x) {
A = B
for(i in 1:length(x)) {
A[A == i] <- x[i];
A[A == -i] <- !x[i];
}
result = 0;
for(r in 1 : nrow(A)) {
rowSum1 <- FALSE;
for(c in 1:ncol(A)-1) {
if(c==1) {
rowSum1 = A[r,c];
} else {
rowSum1 <- rowSum1 | A[r,c];
}
}
if(rowSum1 == TRUE) {
result = result + 1;
}
}
return(result)
}
fitness(A, x)
fitness(A, C(1,1,1,1))
y <- c(1,1,1,1)
fitness(A, y)
fitness = function(B, x) {
A = B
for(i in 1:length(x)) {
A[A == i] <- x[i];
A[A == -i] <- !x[i];
}
result = 0;
for(r in 1 : nrow(A)) {
rowSum1 <- FALSE;
for(c in 1:(ncol(A)-1)) {
if(c==1) {
rowSum1 = A[r,c];
} else {
rowSum1 <- rowSum1 || A[r,c];
}
}
if(rowSum1 == TRUE) {
result = result + 1;
}
}
return(result)
}
A
B
fitness(A, y)
C
A<-matrix(c(-1,2,4,0,-2,3,4,0,1,-3,4,0,1,-2,-4,0,2,-3,-4,0,-1,3,-4,0,1,2,3,0), nrow = 7, ncol=4, byrow = TRUE)
A
fitness(A, y)
fitness(A, x)
phi2
z <- c(1:160)
z <- c(1:160, each=160)
z <- c(1:160, each=1)
z <- rep(z, each=160)
remove(z)
z <- rep(0, 160)
fitness(B, z)
fitness(phi2, z)
z <- rep(1, 160)
fitness(phi2, z)
fitness(phi2, z)
fitness(phi1, y)
fitness(phi1, x)
install.packages("genalg")
library(genalg)
install.packages("ggplot2")
library(ggplot2)
dataset <- A
geneticFitness = function(x) {
A = dataset
for(i in 1:length(x)) {
A[A == i] <- x[i];
A[A == -i] <- !x[i];
}
result = 0;
for(r in 1 : nrow(A)) {
rowSum1 <- FALSE;
for(c in 1:(ncol(A)-1)) {
if(c==1) {
rowSum1 = A[r,c];
} else {
rowSum1 <- rowSum1 || A[r,c];
}
}
if(rowSum1 == TRUE) {
result = result + 1;
}
}
return(-result)
}
GAmodel <- rbga.bin(size = 4, popSize = 200, iters = 100,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc)
GAmodel <- rbga.bin(size = 4, popSize = 200, iters = 100,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc)
GAmodel <- rbga.bin(size = 4, popSize = 200, iters = 100,
mutationChance = 0.01, elitism = T, evalFunc = geneticFitness)
summary(GAmodel, echo=TRUE)
iter<-100
animate_plot <- function() {
for (i in seq(1, iter)) {
temp <- data.frame(Iteracja = c(seq(1, i), seq(1, i)), Legenda = c(rep("Średnia",
i), rep("Najlepsza", i)), WartoscFitness = c(-GAmodel$mean[1:i], -GAmodel$best[1:i]))
pl <- ggplot(temp, aes(x = Iteracja, y = WartoscFitness, group = Legenda,
colour = Legenda)) + geom_line() + scale_x_continuous(limits = c(0,
iter)) + scale_y_continuous(limits = c(0, 110)) + geom_hline(y =
max(temp$WartoscFitness),
lty = 2) + annotate("text", x = 1, y = max(temp$WartoscFitness) +
2, hjust = 0, size = 3, color = "black", label = paste("Najlepsze rozwiązanie:",
max(temp$WartoscFitness))) + scale_colour_brewer(palette = "Set1")
print(pl)
}
}
animate_plot()
iter<-100
animate_plot <- function() {
for (i in seq(1, iter)) {
temp <- data.frame(Iteracja = c(seq(1, i), seq(1, i)), Legenda = c(rep("Średnia",
i), rep("Najlepsza", i)), WartoscFitness = c(-GAmodel$mean[1:i], -GAmodel$best[1:i]))
pl <- ggplot(temp, aes(x = Iteracja, y = WartoscFitness, group = Legenda,
colour = Legenda)) + geom_line() + scale_x_continuous(limits = c(0,
iter)) + scale_y_continuous(limits = c(0, 110)) + geom_hline(yintercept =
max(temp$WartoscFitness),
lty = 2) + annotate("text", x = 1, y = max(temp$WartoscFitness) +
2, hjust = 0, size = 3, color = "black", label = paste("Najlepsze rozwiązanie:",
max(temp$WartoscFitness))) + scale_colour_brewer(palette = "Set1")
print(pl)
}
}
animate_plot()
no
iter<-100
animate_plot <- function() {
for (i in seq(1, iter)) {
temp <- data.frame(Iteracja = c(seq(1, i), seq(1, i)), Legenda = c(rep("Średnia",
i), rep("Najlepsza", i)), WartoscFitness = c(-GAmodel$mean[1:i], -GAmodel$best[1:i]))
pl <- ggplot(temp, aes(x = Iteracja, y = WartoscFitness, group = Legenda,
colour = Legenda)) + geom_line() + scale_x_continuous(limits = c(0,
iter)) + scale_y_continuous(limits = c(0, 30)) + geom_hline(yintercept =
max(temp$WartoscFitness),
lty = 2) + annotate("text", x = 1, y = max(temp$WartoscFitness) +
2, hjust = 0, size = 3, color = "black", label = paste("Najlepsze rozwiązanie:",
max(temp$WartoscFitness))) + scale_colour_brewer(palette = "Set1")
print(pl)
}
}
animate_plot()
