diabetes <- read.csv(https://inf.ug.edu.pl/~gmadejsk/IO2017/diabetes.csv)
diabetes <- read.csv("https://inf.ug.edu.pl/~gmadejsk/IO2017/diabetes.csv")
head(diabetes)
library(ggvis)
install.packages(ggvis)
install.packages("ggvis")
library(ggvis)
ls
library(class)
summary(diabetes)
normalize <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
head(diabetes)
diabetes
diabetes
iris
diabetes_norm <- as.data.frame(lapply(diabetes[1:8], normalize))
diabetes_norm
summary(diabetes_norm)
set.seed(1234)
ind <- sample(2, nrow(diabetes), replace=TRUE, prob=c(0.67, 0.33))
diabetes.training <- diabetes[ind==1, 1:8]
diabetes.test <- diabetes[ind==2, 1:8]
diabetes.test
diabetes.training
diabetes.trainLabels <- diabetes[ind==1,5]
diabetes.trainLabels <- diabetes[ind==1,5]
print(diabetes.trainLabels)
diabetes.testLabels <- diabetes[ind==2, 5]
diabetes.trainLabels <- diabetes[ind==1,5]
print(diabetes.testLabels)
diabetes_pred1 <- knn(train = diabetes.training, test = diabetes.test, cl = diabetes.trainLabels, k=1)
diabetes_pred3 <- knn(train = diabetes.training, test = diabetes.test, cl = diabetes.trainLabels, k=3)
diabetes_pred5 <- knn(train = diabetes.training, test = diabetes.test, cl = diabetes.trainLabels, k=5)
diabetes_pred11 <- knn(train = diabetes.training, test = diabetes.test, cl = diabetes.trainLabels, k=11)
diabetes_pred1
diabetes_pred3
diabetes_pred5
diabetes_pred11
diabetesTestLabels <- data.frame(diabetes.testLabels)
merge1 <- data.frame(diabetes_pred1, diabetes.testLabels)
merge3 <- data.frame(diabetes_pred3, diabetes.testLabels)
merge5 <- data.frame(diabetes_pred5, diabetes.testLabels)
merge11 <- data.frame(diabetes_pred11, diabetes.testLabels)
names(merge1) <- c("Predicted Class", "Observed Class")
names(merge3) <- c("Predicted Class", "Observed Class")
names(merge5) <- c("Predicted Class", "Observed Class")
names(merge11) <- c("Predicted Class", "Observed Class")
merge1
diabetes.trainLabels <- diabetes[ind==1,9]
diabetes.trainLabels <- diabetes[ind==1,9]
print(diabetes.testLabels)
diabetes.trainLabels <- diabetes[ind==1,9]
print(diabetes.testLabels)
diabetes.testLabels <- diabetes[ind==2, 9]
diabetes.trainLabels <- diabetes[ind==1,9]
print(diabetes.testLabels)
print(diabetes.trainLabels)
diabetes_pred1 <- knn(train = diabetes.training, test = diabetes.test, cl = diabetes.trainLabels, k=1)
diabetes_pred3 <- knn(train = diabetes.training, test = diabetes.test, cl = diabetes.trainLabels, k=3)
diabetes_pred5 <- knn(train = diabetes.training, test = diabetes.test, cl = diabetes.trainLabels, k=5)
diabetes_pred11 <- knn(train = diabetes.training, test = diabetes.test, cl = diabetes.trainLabels, k=11)
diabetes_pred1
diabetesTestLabels <- data.frame(diabetes.testLabels)
merge1 <- data.frame(diabetes_pred1, diabetes.testLabels)
merge3 <- data.frame(diabetes_pred3, diabetes.testLabels)
merge5 <- data.frame(diabetes_pred5, diabetes.testLabels)
merge11 <- data.frame(diabetes_pred11, diabetes.testLabels)
names(merge1) <- c("Predicted Class", "Observed Class")
names(merge3) <- c("Predicted Class", "Observed Class")
names(merge5) <- c("Predicted Class", "Observed Class")
names(merge11) <- c("Predicted Class", "Observed Class")
merge1
merge3
merge5
merge11
merge11
m <- naiveBayes(iris[,-5], iris[,5])
install.packages("naiveBayes")
install.packages("naivebayes")
package(naivebayes)
library(naivebayes)
m <- naiveBayes(iris[,-5], iris[,5])
m <- naivebayes(iris[,-5], iris[,5])
m <- naive_bayes(iris[,-5], iris[,5])
View(m)
install.packages("naiveBayes")
m
m
table(predict(m, iris[,-5]), iris[,5])
data("iris")
m <- naiveBayes(Species ~ ., data = iris)
m <- naive_bayes(Species ~ ., data = iris)
m
iris[,-5]
iris
iris[,5]
library(e1071)
install.packages("e1071")
library(e1071)
m <- naiveBayes(Species ~ ., data = iris)
m
table(predict(m, iris[,-5]), iris[,5])
predict(m, iris[,-5]), iris[,5])
predict(m, iris[,-5])
m
predict(m, iris[,-5])
table(predict(m, iris[,-5]), iris[,5])
View(diabetes_norm)
View(diabetes.test)
View(diabetes.training)
View(diabetes.test)
diabetes_norm.test <- as.data.frame(lapply(diabetes.test[1:8], normalize))
diabetes_norm.training <- as.data.frame(lapply(diabetes.training[1:8], normalize))
iris[,-5]
m <- naiveBayes(diabetes_norm.test, diabetes.testLabels)
m <- naiveBayes(diabetes_norm.training, diabetes.testLabels)
m <- naiveBayes(diabetes_norm.test, diabetes.testLabels)
m <- naiveBayes(diabetes_norm.test, diabetes.trainLabels)
m <- naiveBayes(diabetes_norm.training, diabetes.trainLabels)
table(predict(m, diabetes_norm.test), diabetes.testLabels)
nBayesTestTable <- table(predict(m, diabetes_norm.test), diabetes.testLabels)
nBayesTrainingNormDiabetesFormula <- naiveBayes(diabetes_norm.training, diabetes.trainLabels)
nBayesTestTable <- table(predict(nBayesTrainingNormDiabetesFormula, diabetes_norm.test), diabetes.testLabels)
nBayesTestTable
merge11
model_knn <- train(iris.training[, 1:4], iris.training[, 5], method='knn')
train
library(gmodels)
install.packages("gmodels")
library(gmodels)
model_knn <- train(iris.training[, 1:4], iris.training[, 5], method='knn')
nBayesTrainingNormDiabetesFormula
nBayesTestTable
library("party")
install.packages("party")
library("party")
merge1
confMatrKNN1 <- confusionMatrix(diabetes_pred1,diabetes.testLabels)
install.packages("caret")
library("caret")
confMatrKNN1 <- confusionMatrix(diabetes_pred1,diabetes.testLabels)
install.packages("e1071")
library("e1071")
confMatrKNN1 <- confusionMatrix(diabetes_pred1,diabetes.testLabels)
confMatrKNN1
confMatrKNN3 <- confusionMatrix(diabetes_pred3,diabetes.testLabels)
confMatrKNN5 <- confusionMatrix(diabetes_pred5,diabetes.testLabels)
confMatrKNN11 <- confusionMatrix(diabetes_pred11,diabetes.testLabels)
confMatrKNN11
diabetes_norm.test
View(diabetes.training)
View(diabetes_norm.training)
View(diabetes.training)
View(diabetes.test)
View(diabetesTestLabels)
View(diabetes.test)
ctreeModel <- ctree(diabetes.training, diabetes.trainLabels)
diabetes
diabetes.test
diabetes.testAndLabels <- diabetes.test["class"] <- diabetes.testLabels
diabetes.test
diabetes.testAndLabels
diabetes.testAndLabels - diabetes.test
diabetes.testAndLabels = diabetes.test
diabetes.testAndLabels
diabetes.testAndLabels = ( diabetes.test["class"] <- diabetes.testLabels)
diabetes.testAndLabels
diabetes.testAndLabels <- diabetes_norm.test["class"] <- diabetes.testLabels
diabetes.testAndLabelsNorm = diabetes_norm.test
diabetes.testAndLabelsNorm
diabetes_norm.test
diabetes_norm.test$class <-NULL
diabetes_norm.test
diabetes.test
diabetes.test$class <- NULL
diabetes.test
diabetes.trainLabels
diabetes.trainLabels
diabetes.testLabels
diabetes.trainLabels
diabetes.training["class"] <- diabetes.trainLabels
diabetes.training
diabetes.trainAndLabelsNorm = diabetes.training
diabetes.trainAndLabelsNorm
diabetes.training
diabetes.training$class <- NULL
diabetes.training
ctreeModel <- ctree(class ~., data=diabetes.trainAndLabelsNorm)
ctreeModel
ctreeModelDiabetes <- ctree(class ~., data=diabetes.trainAndLabelsNorm)
ctreeModelDiabetes
plot(ctreeModelDiabetes)
ctreePredict <- predict(ctreeModelDiabetes, newdata = diabetes.testAndLabelsNorm)
diabetes.trainAndLabelsNorm
diabetes.testAndLabelsNorm
diabetes.trainAndLabelsNorm
diabetes.trainAndLabelsNorm <- diabetes_norm.training["class"] <- diabetes.trainLabels
diabetes.trainAndLabelsNorm = diabetes_norm.training
diabetes.trainAndLabelsNorm
diabetes_norm.training$class <- NULL
diabetes_norm
ctreeModelDiabetes <- ctree(class ~., data=diabetes.trainAndLabelsNorm)
ctreePredict <- predict(ctreeModelDiabetes, newdata = diabetes.testAndLabelsNorm)
ctreePredict
ctreeConfusionMatrix <- confusionMatrix(ctreePredict, diabetes.testLabels)
ctreeConfusionMatrix
predict(nBayesTrainingNormDiabetesFormula, diabetes_norm.test), diabetes.testLabels)
naiveBayesDiabetesPredict <- predict(nBayesTrainingNormDiabetesFormula, diabetes_norm.test), diabetes.testLabels)
naiveBayesDiabetesPredict <- predict(nBayesTrainingNormDiabetesFormula, diabetes_norm.test)
naiveBayesConfusionMatrix <- confusionMatrix(naiveBayesDiabetesPredict, diabetes.testLabels)
naiveBayesConfusionMatrix
naiveBayesConfusionMatrix$positive
naiveBayesConfusionMatrix.Accuracy
naiveBayesConfusionMatrix$overall['Accuracy']
barplot(naiveBayesConfusionMatrix$overall['Accuracy'])
accuracies <- c(confMatrKNN1$overall['Accuracy'], confMatrKNN3$overall['Accuracy'], confMatrKNN5$overall['Accuracy'], confMatrKNN11$overall['Accuracy'], naiveBayesConfusionMatrix$overall['Accuracy'], ctreeConfusionMatrix$overall['Accuracy'])
accuracies
barplot(accuracies)
accuracies[2,]
accuracies[1,]
accuracies[1]
accuracies[1]
accuracies[1,1]
accuracies[1]$Accuracy
accuracies[1].__C__.name
accuracies[1]
accuracies[1][1]
accuracies[1] *100
accuracies[1]
accuracies <- accuracies * 100
accuracies
barplot(accuracies)
accuracies <- accuracies / 100
accuracies <- accuracies * 100 %
accuracies <- accuracies * 100%
accuracies
accuracies[1]
accuracies[1] + 'knn 1'
accuracies <- c(0.6852590, 0.7011952, 0.7290837, 0.7450199, 0.7410359, 0.6573705)
accuracies[1]
accuracies <- accuracies * 100 %
accuracies <- accuracies * 100
accuracies
names(accuracies)=c("knn1", "knn3", "knn5", "knn11", "naive bayes", "decision tree")
barplot(accuracies, col=rgb(0.5,0.1,0.6,0.6), xlab="algorithms", ylab="accuracy %", main="Algorithms accuracies" , ylim=c(0,100) )
dev.off()
barplot(accuracies, col=rgb(0.5,0.1,0.6,0.6), xlab="algorithms", ylab="accuracy %", main="Algorithms accuracies" , ylim=c(0,100) )
accuracies
barplot(accuracies, col=rgb(0.5,0.1,0.6,0.6), xlab="algorithms", ylab="accuracy %", main="Algorithms accuracies" , ylim=c(0,100), names.arg = accuracies$names )
accuracies[1]
accuracies.names
barplot(accuracies, col=rgb(0.5,0.1,0.6,0.6), xlab="algorithms", ylab="accuracy %", main="Algorithms accuracies" , ylim=c(0,100), names.arg = names(accuracies) )
accuranciesBarPlot <- barplot(accuracies, col=rgb(0.5,0.1,0.6,0.6), xlab="algorithms", ylab="accuracy %", main="Algorithms accuracies" , ylim=c(0,100), names.arg = names(accuracies) )
text(accuranciesBarPlot, accuracies+0.4 , paste(names(accuracies),sep="") ,cex=1)
text(accuranciesBarPlot, accuracies+0.5 , paste(names(accuracies),sep="") ,cex=1)
accuranciesBarPlot <- barplot(accuracies, col=rgb(0.5,0.1,0.6,0.6), xlab="algorithms", ylab="accuracy %", main="Algorithms accuracies" , ylim=c(0,100), names.arg = names(accuracies) )
text(accuranciesBarPlot, accuracies+1.4 , paste(names(accuracies),sep="") ,cex=1)
accuranciesBarPlot <- barplot(accuracies, col=rgb(0.5,0.1,0.6,0.6), xlab="algorithms", ylab="accuracy %", main="Algorithms accuracies" , ylim=c(0,100), names.arg = names(accuracies) )
text(accuranciesBarPlot, accuracies+3.4 , paste(names(accuracies),sep="") ,cex=1)
accuranciesBarPlot <- barplot(accuracies, col=rgb(0.5,0.1,0.6,0.6), xlab="algorithms", ylab="accuracy %", main="Algorithms accuracies" , ylim=c(0,100), names.arg = names(accuracies) )
text(accuranciesBarPlot, accuracies+3.4 , paste((accuracies),sep="") ,cex=1)
confMatrKNN1
confMatrKNN1$table
confMatrKNN1$table[2,]
confMatrKNN1$table[3,]
confMatrKNN1$table[1,]
confMatrKNN1$table[1,1]
confMatrKNN1$table
confMatrKNN1$table[1,2]
calculateTPRFPR <- function (confusionMatrixes) {
cmt = confusionMatrix$table
FPR = cmt[2,1]/(cmt[2,1+cmt[1,1]);
TPR = cmt[2,2]/(tp[2,2]+cmt[1,2]);
c(FPR, TPR)
}
confMatrKNN1$table[1,2] + confMatrKNN1$table[1,1]
calculateTPRFPR = function(confusionMatrixes) {
cmt = confusionMatrix$table
FPR = cmt[2,1])/(cmt[2,1+cmt[1,1])
TPR = cmt[2,2]/(tp[2,2]+cmt[1,2])
x <- c(FPR, TPR)
return x
}
calculateTPRFPR = function(confusionMatrixes) {
cmt = confusionMatrix$table
FPR = cmt[2,1])/(cmt[2,1+cmt[1,1])
TPR = cmt[2,2]/(tp[2,2]+cmt[1,2])
x <- c(FPR, TPR)
return x
}
calculateTPRFPR = function(confusionMatrixes){
cmt = confusionMatrix$table;
TPR = cmt[2,1]/(cmt[2,1] + cmt[1,1]);
}
TPN = cmt[2,2]/(cmt[2,2] +cmt[1,2]);
cmt<- confusionMatrix$table;
calculateTPRFPR = function(confusionMatrixes){
cmt<- confusionMatrix$table;
FPR = cmt[2,1]/(cmt[2,1] + cmt[1,1]);
TPN = cmt[2,2]/(cmt[2,2] +cmt[1,2]);
}
calculateTPRFPR = function(confusionMatrixes){
cmt<- confusionMatrix$table;
FPR = cmt[2,1]/(cmt[2,1] + cmt[1,1]);
TPN = cmt[2,2]/(cmt[2,2] +cmt[1,2]);
x <- c(FPR, TPN);
}
return x;
calculateTPRFPR = function(confusionMatrixes){
cmt<- confusionMatrix$table;
FPR = cmt[2,1]/(cmt[2,1] + cmt[1,1]);
TPN = cmt[2,2]/(cmt[2,2] +cmt[1,2]);
x <- c(FPR, TPN);
return(x);
}
calculateTPRFPR(confMatrKNN1)
calculateTPRFPR = function(confusionMatrix){
cmt<- confusionMatrix$table;
FPR = cmt[2,1]/(cmt[2,1] + cmt[1,1]);
TPN = cmt[2,2]/(cmt[2,2] +cmt[1,2]);
x <- c(FPR, TPN);
return(x);
}
calculateTPRFPR(confMatrKNN1)
scatterplotData <- data.frame(calculateTPRFPR(confMatrKNN1))
scatterplotData
scatterplotData <- as.data.frame(calculateTPRFPR(confMatrKNN1))
scatterplotData
scatterplotData <- as.data.frame(t(calculateTPRFPR(confMatrKNN1))
;
scatterplotData <- as.data.frame(t(calculateTPRFPR(confMatrKNN1)))
scatterplotData
scatterplotData <- scatterplotData + (t(calculateTPRFPR(confMatrKNN1)))
scatterplotData
scatterplotData <- as.data.frame(t(calculateTPRFPR(confMatrKNN1)))
scatterplotData <- rbind(scatterplotData, as.data.frame(t(calculateTPRFPR(confMatrKNN3))))
scatterplotData
scatterplotData <- rbind(scatterplotData, as.data.frame(t(calculateTPRFPR(confMatrKNN5))))
scatterplotData <- rbind(scatterplotData, as.data.frame(t(calculateTPRFPR(confMatrKNN11))))
scatterplotData <- rbind(scatterplotData, as.data.frame(t(calculateTPRFPR(naiveBayesConfusionMatrix))))
scatterplotData <- rbind(scatterplotData, as.data.frame(t(calculateTPRFPR(ctreeConfusionMatrix))))
scatterplotData
library(ggplot2)
ggplot(scatterplotData, aes(x=v1, y=v2)) +
geom_point()
ggplot(scatterplotData, aes(x=x, y=y)) +
geom_point()
ggplot(scatterplotData, aes(x=scatterplotData[,1], y=scatterplotData[,2])) +
geom_point()
scatterplotData
names(scatterplotData) <- c("FPR", "TPR")
scatterplotData
ggplot(scatterplotData, aes(x=scatterplotData[,1], y=scatterplotData[,2])) +
geom_point()
ggplot(scatterplotData, aes(x=FPR, y=TPR)) +
geom_point()
ggplot(scatterplotData, aes(x=FPR, y=TPR)) +
geom_point() + xlim(0,1) + ylim(0,1)
ggplot(scatterplotData, aes(x=FPR, y=TPR, color= scatterplotData)) +
geom_point() + xlim(0,1) + ylim(0,1)
scatterplotData["algorithm"] <- c("knn1", "knn3", "knn5", "knn11", "naive bayes", "decision tree")
ggplot(scatterplotData, aes(x=FPR, y=TPR, color= algorithm)) +
geom_point() + xlim(0,1) + ylim(0,1)
ggplot(scatterplotData, aes(x=FPR, y=TPR, color= algorithm)) +
geom_point() + xlim(0,1) + ylim(0,1) +geom_text(aes(label="["+FPR+","+TPR+"}"),hjust=0, vjust=0)
ggplot(scatterplotData, aes(x=FPR, y=TPR, color= algorithm)) +
geom_point() + xlim(0,1) + ylim(0,1) +geom_text(aes(label="["+FPR+","+TPR+"]"),hjust=0, vjust=0)
ggplot(scatterplotData, aes(x=FPR, y=TPR, color= algorithm)) +
geom_point() + xlim(0,1) + ylim(0,1)
ggplot(scatterplotData, aes(x=FPR, y=TPR, color= algorithm)) +
geom_point() + xlim(0,1) + ylim(0,1) +geom_text(aes(label="label"),hjust=0, vjust=0)
ggplot(scatterplotData, aes(x=FPR, y=TPR, color= algorithm)) +
geom_point() + xlim(0,1) + ylim(0,1) +geom_text(aes(label="label"),hjust=0, vjust=0)
ggplot(scatterplotData, aes(x=FPR, y=TPR, color= algorithm)) +
geom_point() + xlim(0,1) + ylim(0,1) +geom_text(aes(label=sprintf("[%d,%d]",FPR, TPR)),hjust=0, vjust=0)
ggplot(scatterplotData, aes(x=FPR, y=TPR, color= algorithm)) +
geom_point() + xlim(0,1) + ylim(0,1) +geom_text(aes(label=sprintf("[%f,%f]",FPR, TPR)),hjust=0, vjust=0)
scatterPlotTPFP <- ggplot(scatterplotData, aes(x=FPR, y=TPR, color= algorithm)) +
geom_point() + xlim(0,1) + ylim(0,1) +geom_text(aes(label=sprintf("[%f,%f]",FPR, TPR)),hjust=0, vjust=0)
scatterPlotTPFP
scatterPlotTPFP
accuracies
accuranciesBarPlot
accuranciesBarPlot <- barplot(accuracies, col=rgb(0.5,0.1,0.6,0.6), xlab="algorithms", ylab="accuracy %", main="Algorithms accuracies" , ylim=c(0,100), names.arg = names(accuracies) )
text(accuranciesBarPlot, accuracies+3.4 , paste((accuracies),sep="") ,cex=1)
accuranciesBarPlot
ctreeModelDiabetes
scatterPlotTPFP
plot(ctreeModelDiabetes)
source('C:/workspace/RProjects/Zadanie3/fptTprFunction.R')
source('C:/workspace/RProjects/Zadanie3/fptTprFunction.R')
source('C:/workspace/RProjects/Zadanie3/fptTprFunction.R')
calculateTPRFPR = function(confusionMatrix){
cmt<- confusionMatrix$table;
FPR = cmt[2,1]/(cmt[2,1] + cmt[1,1]);
TPN = cmt[2,2]/(cmt[2,2] +cmt[1,2]);
x <- c(FPR, TPN);
return(x);
}
