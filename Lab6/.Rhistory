return (num/denom)
}
iris_norm <- extendIris(iris_input = iris)
extendIris = function (iris_input) {
iris_data <- iris_input
iris_data[6] <-iris_data[5]
iris_data[7] <-iris_data[5]
iris_data[8] <-iris_data[5]
for(i in 1: length(iris_data[,1])) {
if(iris_data[i,5] == 'setosa') {
iris_data[i,9] = 1
} else {
iris_data[i,9] = 0
}
if(iris_data[i,6] == 'versicolor') {
iris_data[i,10] = 1
} else {
iris_data[i,10] = 0
}
if(iris_data[i,7] == 'virginica') {
iris_data[i,11]  = 1
} else {
iris_data[i,11]  = 0
}
}
names(iris_data)[9] <- 'setosa'
names(iris_data)[10] <- 'virginica'
names(iris_data)[11] <- 'versicolor'
iris_data[6] <- NULL
iris_data[6] <- NULL
iris_data[6] <- NULL
iris_data[9] <- iris_data[5]
iris_data[5] <- NULL
return(iris_data)
}
normalize <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
iris_norm <- extendIris(iris_input = iris)
iris_norm <- as.data.frame(lapply(iris_norm[1:7], normalize))
set.seed(1234)
separated_iris <- sample(2, nrow(iris.norm), replace=TRUE, prob=c(0.67, 0.33))
separated_iris <- sample(2, nrow(iris_norm), replace=TRUE, prob=c(0.67, 0.33))
iris_labels <- iris[5]
View(iris_labels)
iris_training <- iris.norm[ind==1, 1:7]
iris_training <- iris_norm[ind==1, 1:7]
iris_training <- iris_norm[separated_iris==1, 1:7]
iris_training
iris_test <- iris_norm[separated_iris==2, 1:7]
iris_test_labels <- iris[separated_iris==2, 8]
iris_neuralnet <- neuralnet(setosa + versicolor + virginica ~ Sepal.length + Sepal.width + Petal.length + Petal.width, iris_training, hidden=4, lifesign="full")
library('neuralnet')
iris_neuralnet <- neuralnet(setosa + versicolor + virginica ~ Sepal.length + Sepal.width + Petal.length + Petal.width, iris_training, hidden=4, lifesign="full")
View(iris_training)
iris_neuralnet <- neuralnet(setosa + versicolor + virginica ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, iris_training, hidden=4, lifesign="full")
iris_predicate <- compute(iris_neuralnet, iris_test[1:4])
View(iris_predicate)
iris_results = data.frame(pred=
ifelse(iris_predict$net.result[,1] > 0.5, "setosa",
(ifelse(iris_predict$net.result[,2] > 0.5, "versicolor",
ifelse(iris_predict$net.result[,3] > 0.5, "virginica", "NA")))))
iris_results = data.frame(pred=
ifelse(iris_predicate$net.result[,1] > 0.5, "setosa",
(ifelse(iris_predicate$net.result[,2] > 0.5, "versicolor",
ifelse(iris_predicate$net.result[,3] > 0.5, "virginica", "NA")))))
View(iris_results)
confusionMatrix(iris_results$pred, iris_test_labels)
install.packages("caret")
library("caret")
confusionMatrix(iris_results$pred, iris_test_labels)
iris_results$pred
iris_test_labels
iris_test_labels <- iris[separated_iris==2, 8]
iris[separated_iris==2,8]
iris_test_labels <- iris[separated_iris==2, 5]
confusionMatrix(iris_results$pred, iris_test_labels)
cf <- confusionMatrix(iris_results$pred, iris_test_labels)
cf
iris_results = data.frame(pred=
ifelse(iris_predicate$net.result[,1] > 0.6, "setosa",
(ifelse(iris_predicate$net.result[,2] > 0.6, "versicolor",
ifelse(iris_predicate$net.result[,3] > 0.6, "virginica", "NA")))))
confusionMatrix(iris_results$pred, iris_test_labels)
cf <- confusionMatrix(iris_results$pred, iris_test_labels)
iris_results$pred
iris_results = data.frame(pred=
ifelse(iris_predicate$net.result[,1] > 0.6, "setosa",
(ifelse(iris_predicate$net.result[,2] > 0.6, "versicolor",
ifelse(iris_predicate$net.result[,3] > 0.6, "virginica", "NA")))))
iris_test_labels
iris_results = data.frame(pred=
ifelse(iris_predicate$net.result[,1] > 0.6, "setosa",
(ifelse(iris_predicate$net.result[,2] > 0.6, "versicolor",
ifelse(iris_predicate$net.result[,3] > 0.6, "virginica", "NA")))))
cf <- confusionMatrix(iris_results$pred, iris_test_labels)
iris_results = data.frame(pred=
ifelse(iris_predicate$net.result[,1] > 0.5, "setosa",
(ifelse(iris_predicate$net.result[,2] > 0.5, "versicolor",
ifelse(iris_predicate$net.result[,3] > 0.5, "virginica", "NA")))))
cf <- confusionMatrix(iris_results$pred, iris_test_labels)
cf
iris_results = data.frame(pred=
ifelse(iris_predicate$net.result[,1] > 0.6, "setosa",
(ifelse(iris_predicate$net.result[,2] > 0.6, "versicolor",
ifelse(iris_predicate$net.result[,3] > 0.5, "virginica", "NA")))))
iris_results$pred
iris_results = data.frame(pred=
ifelse(iris_predicate$net.result[,1] > 0.6, "setosa",
(ifelse(iris_predicate$net.result[,2] > 0.6, "versicolor",
ifelse(iris_predicate$net.result[,3] > 0.6, "virginica", "NA")))))
iris_results$pred
iris_results = data.frame(pred=
ifelse(iris_predicate$net.result[,1] > 0.6, "setosa",
(ifelse(iris_predicate$net.result[,2] > 0.6, "versicolor",
ifelse(iris_predicate$net.result[,3] > 0.7, "virginica", "NA")))))
iris_results$pred
iris_results = data.frame(pred=
ifelse(iris_predicate$net.result[,1] > 0.7, "setosa",
(ifelse(iris_predicate$net.result[,2] > 0.7, "versicolor",
ifelse(iris_predicate$net.result[,3] > 0.7, "virginica", "NA")))))
iris_results$pred
iris_results = data.frame(pred=
ifelse(iris_predicate$net.result[,1] > 0.5, "setosa",
(ifelse(iris_predicate$net.result[,2] > 0.5, "versicolor",
ifelse(iris_predicate$net.result[,3] > 0.5, "virginica", "NA")))))
iris_results$pred
View(iris_training)
extendIris = function (iris_input) {
iris_data <- iris_input
iris_data[6] <-iris_data[5]
iris_data[7] <-iris_data[5]
iris_data[8] <-iris_data[5]
for(i in 1: length(iris_data[,1])) {
if(iris_data[i,5] == 'setosa') {
iris_data[i,9] = 1
} else {
iris_data[i,9] = 0
}
if(iris_data[i,6] == 'versicolor') {
iris_data[i,10] = 1
} else {
iris_data[i,10] = 0
}
if(iris_data[i,7] == 'virginica') {
iris_data[i,11]  = 1
} else {
iris_data[i,11]  = 0
}
}
names(iris_data)[9] <- 'setosa'
names(iris_data)[10] <- 'virginica'
names(iris_data)[11] <- 'versicolor'
iris_data[6] <- NULL
iris_data[6] <- NULL
iris_data[6] <- NULL
iris_data[9] <- iris_data[5]
iris_data[5] <- NULL
return(iris_data)
}
normalize <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
iris_norm <- extendIris(iris_input = iris)
iris_norm <- as.data.frame(lapply(iris_norm[1:7], normalize))
set.seed(1234)
separated_iris <- sample(2, nrow(iris_norm), replace=TRUE, prob=c(0.67, 0.33))
iris_labels <- iris[5]
View(iris_labels)
iris_training <- iris_norm[separated_iris==1, 1:7]
iris_test <- iris_norm[separated_iris==2, 1:7]
iris_test_labels <- iris[separated_iris==2, 5]
iris_neuralnet <- neuralnet(setosa + versicolor + virginica ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, iris_training, hidden=4, lifesign="full")
iris_predicate <- compute(iris_neuralnet, iris_test[1:4])
iris_results = data.frame(pred=
ifelse(iris_predicate$net.result[,1] > 0.5, "setosa",
(ifelse(iris_predicate$net.result[,2] > 0.5, "versicolor",
ifelse(iris_predicate$net.result[,3] > 0.5, "virginica", "NA")))))
View(iris_results)
confusionMatrix(iris_results$pred, iris_test_labels)
install.packages("caret")
library("caret")
cf <- confusionMatrix(iris_results$pred, iris_test_labels)
cf
extendIris = function (iris_input) {
iris_data <- iris_input
iris_data[6] <-iris_data[5]
iris_data[7] <-iris_data[5]
iris_data[8] <-iris_data[5]
for(i in 1: length(iris_data[,1])) {
if(iris_data[i,5] == 'setosa') {
iris_data[i,9] = 1
} else {
iris_data[i,9] = 0
}
if(iris_data[i,6] == 'versicolor') {
iris_data[i,10] = 1
} else {
iris_data[i,10] = 0
}
if(iris_data[i,7] == 'virginica') {
iris_data[i,11]  = 1
} else {
iris_data[i,11]  = 0
}
}
names(iris_data)[9] <- 'setosa'
names(iris_data)[10] <- 'virginica'
names(iris_data)[11] <- 'versicolor'
iris_data[6] <- NULL
iris_data[6] <- NULL
iris_data[6] <- NULL
iris_data[9] <- iris_data[5]
iris_data[5] <- NULL
return(iris_data)
}
normalize <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
iris_norm <- extendIris(iris_input = iris)
iris_norm <- as.data.frame(lapply(iris_norm[1:7], normalize))
set.seed(1234)
separated_iris <- sample(2, nrow(iris_norm), replace=TRUE, prob=c(0.67, 0.33))
iris_labels <- iris[5]
View(iris_labels)
iris_training <- iris_norm[separated_iris==1, 1:7]
iris_test <- iris_norm[separated_iris==2, 1:7]
iris_test_labels <- iris[separated_iris==2, 5]
iris_neuralnet <- neuralnet(setosa + versicolor + virginica ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, iris_training, hidden=4, lifesign="full")
iris_predicate <- compute(iris_neuralnet, iris_test[1:4])
iris_results = data.frame(pred=
ifelse(iris_predicate$net.result[,1] > 0.5, "setosa",
(ifelse(iris_predicate$net.result[,2] > 0.5, "versicolor",
ifelse(iris_predicate$net.result[,3] > 0.5, "virginica", "NA")))))
View(iris_results)
install.packages("caret")
library("caret")
cf <- confusionMatrix(iris_results$pred, iris_test_labels)
cf
install.packages("caret")
install.packages("caret")
library("caret")
extendIris = function (iris_input) {
iris_data <- iris_input
iris_data[6] <-iris_data[5]
iris_data[7] <-iris_data[5]
iris_data[8] <-iris_data[5]
for(i in 1: length(iris_data[,1])) {
if(iris_data[i,5] == 'setosa') {
iris_data[i,9] = 1
} else {
iris_data[i,9] = 0
}
if(iris_data[i,6] == 'versicolor') {
iris_data[i,10] = 1
} else {
iris_data[i,10] = 0
}
if(iris_data[i,7] == 'virginica') {
iris_data[i,11]  = 1
} else {
iris_data[i,11]  = 0
}
}
names(iris_data)[9] <- 'setosa'
names(iris_data)[10] <- 'virginica'
names(iris_data)[11] <- 'versicolor'
iris_data[6] <- NULL
iris_data[6] <- NULL
iris_data[6] <- NULL
iris_data[9] <- iris_data[5]
iris_data[5] <- NULL
return(iris_data)
}
normalize <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
iris_norm <- extendIris(iris_input = iris)
iris_norm <- as.data.frame(lapply(iris_norm[1:7], normalize))
set.seed(1234)
separated_iris <- sample(2, nrow(iris_norm), replace=TRUE, prob=c(0.67, 0.33))
iris_labels <- iris[5]
View(iris_labels)
iris_training <- iris_norm[separated_iris==1, 1:7]
iris_test <- iris_norm[separated_iris==2, 1:7]
iris_test_labels <- iris[separated_iris==2, 5]
iris_neuralnet <- neuralnet(setosa + versicolor + virginica ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, iris_training, hidden=4, lifesign="full")
iris_predicate <- compute(iris_neuralnet, iris_test[1:4])
iris_results <- data.frame(pred=
ifelse(iris_predicate$net.result[,1] > 0.5, "setosa",
(ifelse(iris_predicate$net.result[,2] > 0.5, "versicolor",
ifelse(iris_predicate$net.result[,3] > 0.5, "virginica", "NA")))))
cf <- confusionMatrix(iris_results$pred, iris_test_labels)
cf
install.packages("caret")
install.packages("caret")
library("caret")
extendIris = function (iris_input) {
iris_data <- iris_input
iris_data[6] <-iris_data[5]
iris_data[7] <-iris_data[5]
iris_data[8] <-iris_data[5]
for(i in 1: length(iris_data[,1])) {
if(iris_data[i,5] == 'setosa') {
iris_data[i,9] = 1
} else {
iris_data[i,9] = 0
}
if(iris_data[i,6] == 'versicolor') {
iris_data[i,10] = 1
} else {
iris_data[i,10] = 0
}
if(iris_data[i,7] == 'virginica') {
iris_data[i,11]  = 1
} else {
iris_data[i,11]  = 0
}
}
names(iris_data)[9] <- 'setosa'
names(iris_data)[10] <- 'virginica'
names(iris_data)[11] <- 'versicolor'
iris_data[6] <- NULL
iris_data[6] <- NULL
iris_data[6] <- NULL
iris_data[9] <- iris_data[5]
iris_data[5] <- NULL
return(iris_data)
}
normalize <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
iris_norm <- extendIris(iris_input = iris)
iris_norm <- as.data.frame(lapply(iris_norm[1:7], normalize))
set.seed(1234)
separated_iris <- sample(2, nrow(iris_norm), replace=TRUE, prob=c(0.67, 0.33))
iris_labels <- iris[5]
View(iris_labels)
iris_training <- iris_norm[separated_iris==1, 1:7]
iris_test <- iris_norm[separated_iris==2, 1:7]
iris_test_labels <- iris[separated_iris==2, 5]
iris_neuralnet <- neuralnet(setosa + versicolor + virginica ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, iris_training, hidden=4, lifesign="full")
iris_predicate <- compute(iris_neuralnet, iris_test[1:4])
iris_results <- data.frame(pred=
ifelse(iris_predicate$net.result[,1] > 0.5, "setosa",
(ifelse(iris_predicate$net.result[,2] > 0.5, "versicolor",
ifelse(iris_predicate$net.result[,3] > 0.5, "virginica", "NA")))))
cf <- confusionMatrix(iris_results$pred, iris_test_labels)
cf
install.packages("caret")
install.packages("caret")
install.packages("neuralnet")
library("neuralnet")
library("caret")
extendIris = function (iris_input) {
iris_data <- iris_input
iris_data[6] <-iris_data[5]
iris_data[7] <-iris_data[5]
iris_data[8] <-iris_data[5]
for(i in 1: length(iris_data[,1])) {
if(iris_data[i,5] == 'setosa') {
iris_data[i,9] = 1
} else {
iris_data[i,9] = 0
}
if(iris_data[i,6] == 'versicolor') {
iris_data[i,10] = 1
} else {
iris_data[i,10] = 0
}
if(iris_data[i,7] == 'virginica') {
iris_data[i,11]  = 1
} else {
iris_data[i,11]  = 0
}
}
names(iris_data)[9] <- 'setosa'
names(iris_data)[10] <- 'virginica'
names(iris_data)[11] <- 'versicolor'
iris_data[6] <- NULL
iris_data[6] <- NULL
iris_data[6] <- NULL
iris_data[9] <- iris_data[5]
iris_data[5] <- NULL
return(iris_data)
}
normalize <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
iris_norm <- extendIris(iris_input = iris)
iris_norm <- as.data.frame(lapply(iris_norm[1:7], normalize))
set.seed(1234)
separated_iris <- sample(2, nrow(iris_norm), replace=TRUE, prob=c(0.67, 0.33))
iris_labels <- iris[5]
View(iris_labels)
iris_training <- iris_norm[separated_iris==1, 1:7]
iris_test <- iris_norm[separated_iris==2, 1:7]
iris_test_labels <- iris[separated_iris==2, 5]
iris_neuralnet <- neuralnet(setosa + versicolor + virginica ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, iris_training, hidden=4, lifesign="full")
iris_predicate <- compute(iris_neuralnet, iris_test[1:4])
iris_results <- data.frame(pred=
ifelse(iris_predicate$net.result[,1] > 0.5, "setosa",
(ifelse(iris_predicate$net.result[,2] > 0.5, "versicolor",
ifelse(iris_predicate$net.result[,3] > 0.5, "virginica", "NA")))))
cf <- confusionMatrix(iris_results$pred, iris_test_labels)
cf
install.packages("caret")
install.packages("neuralnet")
install.packages("neuralnet")
library("neuralnet")
library("caret")
extendIris = function (iris_input) {
iris_data <- iris_input
iris_data[6] <-iris_data[5]
iris_data[7] <-iris_data[5]
iris_data[8] <-iris_data[5]
for(i in 1: length(iris_data[,1])) {
if(iris_data[i,5] == 'setosa') {
iris_data[i,9] = 1
} else {
iris_data[i,9] = 0
}
if(iris_data[i,6] == 'versicolor') {
iris_data[i,10] = 1
} else {
iris_data[i,10] = 0
}
if(iris_data[i,7] == 'virginica') {
iris_data[i,11]  = 1
} else {
iris_data[i,11]  = 0
}
}
names(iris_data)[9] <- 'setosa'
names(iris_data)[10] <- 'virginica'
names(iris_data)[11] <- 'versicolor'
iris_data[6] <- NULL
iris_data[6] <- NULL
iris_data[6] <- NULL
iris_data[9] <- iris_data[5]
iris_data[5] <- NULL
return(iris_data)
}
normalize <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
iris_norm <- extendIris(iris_input = iris)
iris_norm <- as.data.frame(lapply(iris_norm[1:7], normalize))
set.seed(1234)
separated_iris <- sample(2, nrow(iris_norm), replace=TRUE, prob=c(0.67, 0.33))
iris_labels <- iris[5]
View(iris_labels)
iris_training <- iris_norm[separated_iris==1, 1:7]
iris_test <- iris_norm[separated_iris==2, 1:7]
iris_test_labels <- iris[separated_iris==2, 5]
iris_neuralnet <- neuralnet(setosa + versicolor + virginica ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width, iris_training, hidden=4, lifesign="full")
iris_predicate <- compute(iris_neuralnet, iris_test[1:4])
iris_results <- data.frame(pred=
ifelse(iris_predicate$net.result[,1] > 0.5, "setosa",
(ifelse(iris_predicate$net.result[,2] > 0.5, "versicolor",
ifelse(iris_predicate$net.result[,3] > 0.5, "virginica", "NA")))))
cf <- confusionMatrix(iris_results$pred, iris_test_labels)
cf
diabs <- read.csv("https://inf.ug.edu.pl/~gmadejsk/IO2017/diabetes.csv")
diabetes <- diabs
diabetes[,9] = ifelse(diabetes[,9] == 'tested_positive', 1, 0)
diabetes.norm <- as.data.frame(lapply(diabetes[1:9], normalize))
set.seed(1234)
diabs_separated <- sample(2, nrow(diabetes.norm), replace=TRUE, prob=c(0.67, 0.33))
diabetes_train <- diabetes.norm[diabs_separated==1, 1:9]
diabetes_test <- diabetes.norm[diabs_separated==2, 1:9]
diabetes_testLabels <- diabs[diabs_separated==2, 9]
diabetes.trainLabels <- diabs[diabs_separated==1,9]
diabetes_neuralnet <- neuralnet(class ~ pregnant.times + glucose.concentr + blood.pressure + skin.thickness + insulin + mass.diabs_separatedex + pedigree.func + age, diabetes_train, hidden=10, lifesign="full")
plot(diabetes_neuralnet)
predicate <- compute(diabetes_neuralnet, diabetes_test[1:8])
predicate$net.result
diabetes_result <- data.frame(pred=ifelse(predicate$net.result[,1] > 1.0, 'tested_positive', 'tested_negative'))
cf <- confusionMatrix(diabetes_result$pred, diabetes_testLabels)
cf$overall['Accuracy'] * 100
View(diabs)
diabs <- read.csv("https://inf.ug.edu.pl/~gmadejsk/IO2017/diabetes.csv")
diabetes <- diabs
diabetes[,9] = ifelse(diabetes[,9] == 'tested_positive', 1, 0)
diabetes.norm <- as.data.frame(lapply(diabetes[1:9], normalize))
set.seed(1234)
diabs_separated <- sample(2, nrow(diabetes.norm), replace=TRUE, prob=c(0.67, 0.33))
diabetes_train <- diabetes.norm[diabs_separated==1, 1:9]
diabetes_test <- diabetes.norm[diabs_separated==2, 1:9]
diabetes_testLabels <- diabs[diabs_separated==2, 9]
diabetes.trainLabels <- diabs[diabs_separated==1,9]
diabetes_neuralnet <- neuralnet(class ~ pregnant.times + glucose.concentr + blood.pressure + skin.thickness + insulin + mass.index + pedigree.func + age, diabetes_train, hidden=10, lifesign="full")
plot(diabetes_neuralnet)
predicate <- compute(diabetes_neuralnet, diabetes_test[1:8])
predicate$net.result
diabetes_result <- data.frame(pred=ifelse(predicate$net.result[,1] > 1.0, 'tested_positive', 'tested_negative'))
cf <- confusionMatrix(diabetes_result$pred, diabetes_testLabels)
cf$overall['Accuracy'] * 100
